{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/Table.js","utils/API.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","SearchBar","props","onSubmit","handleFormSubmit","value","name","onChange","handleInputChange","type","placeholder","Table","scope","data-field","data-sortable","onClick","sortBy","state","filteredEmployees","map","employee","_employee$name","first","last","fullName","concat","dob","formatDate","date","key","login","uuid","src","picture","thumbnail","alt","href","phone","email","API","axios","get","Container","search","employees","sortDirections","_this","initialSortDirections","event","target","setState","filterEmployees","toLowerCase","trim","preventDefault","primary","arguments","length","undefined","secondary","sortedEmployees","reverse","Object","objectSpread2","defineProperty","sort","b","localeCompare","input","filter","includes","replace","Date","push","getMonth","slice","getDate","getFullYear","join","_this2","this","then","res","data","results","catch","err","console","log","Fragment","components_SearchBar","components_Table","Component","App","components_Header","components_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c0ccde2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Header.css\"\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1 className=\"text-center\">Employee Directory</h1>\r\n      <p className=\"text-center\">\r\n        Click on column headers to filter by heading or use the search box to narrow\r\n        your results!\r\n      </p>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"../styles/SearchBar.css\"\r\n\r\nconst SearchBar = (props) => {\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light justify-content-center\">\r\n      <form className=\"form-inline m-2\" onSubmit={props.handleFormSubmit}>\r\n        <input\r\n          className=\"form-control\"\r\n          value={props.value}\r\n          name=\"search\"\r\n          onChange={props.handleInputChange}\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n        />\r\n      </form>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport \"../styles/Table.css\"\r\n\r\nconst Table = (props) => {\r\n  return (\r\n    <table className=\"table table-striped table-sortable text-center\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Image</th>\r\n          <th scope=\"col\" data-field=\"name\" data-sortable=\"true\">\r\n            <span onClick={() => props.sortBy(\"name\", \"last\", \"first\")}>\r\n              Name\r\n            </span>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <span onClick={() => props.sortBy(\"phone\")}>Phone</span>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <span onClick={() => props.sortBy(\"email\")}>Email</span>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <span onClick={() => props.sortBy(\"dob\", \"date\")}>DOB</span>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.state.filteredEmployees.map((employee) => {\r\n          const { first, last } = employee.name;\r\n          const fullName = `${first} ${last}`;\r\n          const dob = props.formatDate(employee.dob.date);\r\n          return (\r\n            <tr key={employee.login.uuid}>\r\n              <td>\r\n                <img src={employee.picture.thumbnail} alt={fullName} />\r\n              </td>\r\n              <td className=\"align-middle\">{fullName}</td>\r\n              <td className=\"align-middle\">\r\n                <a href={`tel:+1${employee.phone}`}>{employee.phone}</a></td>\r\n              <td className=\"align-middle email\">\r\n                <a href={`mailto:${employee.email}`}>{employee.email}</a>\r\n              </td>\r\n              <td className=\"align-middle\">{dob}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;","import axios from \"axios\";\r\n\r\nconst url = \"https://randomuser.me/api/?results=50&nat=us\"\r\n\r\nexport default {\r\n    getEmployees: function() {\r\n        return axios.get(url);\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport EmployeeTable from \"../components/Table\";\r\nimport API from \"../utils/API\";\r\n\r\nclass Container extends Component {\r\n  state = {\r\n    search: \"\",\r\n    employees: [],\r\n    filteredEmployees: [],\r\n    sortDirections: this.initialSortDirections,\r\n  };\r\n\r\n  get initialSortDirections() {\r\n    return {\r\n      name: \"\",\r\n      phone: \"\",\r\n      email: \"\",\r\n      dob: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.getEmployees()\r\n      .then((res) =>\r\n        this.setState({\r\n          employees: res.data.results,\r\n          filteredEmployees: res.data.results,\r\n        })\r\n      )\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ search: value });\r\n    this.filterEmployees(value.toLowerCase().trim());\r\n  };\r\n\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  sortBy = (key, primary = 0, secondary = 0) => {\r\n    let sortedEmployees = this.state.filteredEmployees;\r\n    if (this.state.sortDirections[key]) {\r\n      this.setState({\r\n        filteredEmployees: sortedEmployees.reverse(),\r\n        sortDirections: {\r\n          ...this.initialSortDirections,\r\n          [key]: this.state.sortDirections[key] === \"asc\" ? \"desc\" : \"asc\",\r\n        },\r\n      });\r\n    } else {\r\n      sortedEmployees = this.state.filteredEmployees.sort((a, b) => {\r\n        a = a[key];\r\n        b = b[key];\r\n\r\n        if (primary) {\r\n          if (secondary && a[primary] === b[primary]) {\r\n            return a[secondary].localeCompare(b[secondary]);\r\n          }\r\n          return a[primary].localeCompare(b[primary]);\r\n        } else {\r\n          return a.localeCompare(b);\r\n        }\r\n      });\r\n\r\n      this.setState({\r\n        filteredEmployees: sortedEmployees,\r\n        sortDirections: {\r\n          ...this.initialSortDirections,\r\n          [key]: \"asc\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  filterEmployees = (input) => {\r\n    if (input) {\r\n      this.setState({\r\n        filteredEmployees: this.state.employees.filter((employee) => {\r\n          return (\r\n            employee.name.first\r\n              .toLowerCase()\r\n              .concat(\" \", employee.name.last.toLowerCase())\r\n              .includes(input) ||\r\n            employee.phone.includes(input) ||\r\n            employee.phone.replace(/[^\\w\\s]/gi, \"\").includes(input) ||\r\n            employee.email.includes(input) ||\r\n            this.formatDate(employee.dob.date).includes(input)\r\n          );\r\n        }),\r\n      });\r\n    } else {\r\n      this.setState({ filteredEmployees: this.state.employees });\r\n    }\r\n  };\r\n\r\n  formatDate = (date) => {\r\n    date = new Date(date);\r\n    let dob = [];\r\n    dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\r\n    dob.push((\"0\" + date.getDate()).slice(-2));\r\n    dob.push(date.getFullYear());\r\n    return dob.join(\"-\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <SearchBar\r\n          value={this.state.search}\r\n          handleInputChange={this.handleInputChange}\r\n          handleFormSubmit={this.handleFormSubmit}\r\n        />\r\n        <div className=\"container mt-4\">\r\n          <EmployeeTable\r\n            state={this.state}\r\n            sortBy={this.sortBy}\r\n            filterEmployees={this.filterEmployees}\r\n            formatDate={this.formatDate}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Container from \"./components/Container\";\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Container />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}